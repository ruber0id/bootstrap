# playbook version fill automatically
playbook_version: 3.10.20
branch: master
# ########## google site verifications file name ##########
_google_webmaster: "" # like google65679391aa745584.html
# ########## Features ##########
setup_server: yes
setup_nginx: yes
_setup_ssl: yes
setup_jupyter: yes
setup_theia: yes
metrics_server: no
# will runned by director at first start
_initial_startup: [mmgeo, sxgeo, uaparser]
tz: UTC
# sysuser
rsys_creds: [ "rsys", "" ]
ruser_creds: [ "ruser", "" ]
# main user. (temp)
main_user: default
main_user_password: default
# system users
support_user: 'x011'
_uid: "472"
_gid: "472"
remote_user: "{{ support_user }}"
#key for update manager to access server
support_key_file: './keys/support.pub'
support_key: "{{ lookup('file', support_key_file) }}"
# ########## emitting configuration ##########
local_facts_dir: /etc/ansible/facts.d/
customs: "{{_customs|default({})}}"
_local_config: "{{ (ansible_local.config|default({})).general|default({}) }}"

_random_pass: "{{ lookup('lines', 'sh -c \"openssl rand -base64 18 | openssl passwd -apr1 -stdin\"') }}"
_fullname: "{{ realname|default(_local_config.fullname|default('Aldous Huxley'))}}"
_email: "{{ email|default(_local_config.email|default('hello@example.com'))}}"
_admin_password: "{{admin_password|default(_local_config.admin_password|default(_random_pass))}}"
_enable_support: "{{enable_support|default(_local_config.enable_support|default('1')|bool)}}"
_dns_challenge: "{{_local_config.dns_challenge|default('http')}}"
_ssl_wildcard: "{{ssl_wildcard|default(_dns_challenge == 'dns')|bool}}"
_tag: "{{ (branch == 'master')|ternary('latest', branch) }}"
# ########## Domains ##########
_domain: "{{_local_config.domain|default(ansible_host)}}"
_subdomains_prefixes_default: [app, wss, web, grafana, jupyter, theia, netdata, demo]
_subdomains_prefixes: "{{ (_subdomains_prefixes_default + _subdomains_prefixes_extra|default([])) }}"
_subdomains: "{{ _subdomains_prefixes | map('regex_replace', '^(.*)$', '\\1.' + _domain)|list }}"
_extra_domains: []
_domains: "{{ [_domain] +  _extra_domains|default([]) }}"

# ########## Repos ##########
_git_organization: https://github.com/rockstat
repos:
  band_set: "{{_git_organization}}/band-services-set"
  dashboard: "{{_git_organization}}/dashboard.git"
  theia: "{{_git_organization}}/theia-ide-image.git"
  splash: "{{_git_organization}}/splash.git"
# ########## Images ##########
_images:
  band: "rockstat/band-base-py:{{ (branch == 'master')|ternary('3.7', '3.7-' + branch) }}"
  director: "rockstat/director:{{_tag}}"
  caddy: "rockstat/caddy"
  front: "rockstat/front:{{_tag}}"
  chwriter: "rockstat/chwriter:{{_tag}}"
  ebaloger: rockstat/ebaloger
  theia: "rockstat/theia-ide:{{_tag}}"
  heavyload: rockstat/heavyload
  jupyter: "rockstat/jupyter:{{_tag}}"
  httpdebug: rockstat/httpdebug
  logspout: gliderlabs/logspout
  chproxy: rockstat/chproxy
  redis: redis:4-alpine
  clickhouse: yandex/clickhouse-server
  postgrest: postgrest/postgrest
  netdata: netdata/netdata
  grafana: rockstat/grafana
  fakeshop: madiedinro/fake-shop
images: "{{_images|combine(_images_extra|default({}))}}"
# ########## Logs ##########
_loggly_hostname: logs-01.loggly...
_loggly_api_key: 10bbf2d8...
_papertrail_hostname: logs7.pape....
_logspout_target: none
_logspout_enabled: yes
# ########## dirs ##########
home_dir: '/srv/platform'
data_dir: '{{home_dir}}/data'
etc_dir: '{{home_dir}}/etc'
build_dir: '{{home_dir}}/build'
images_dir: "{{home_dir}}/images"
libraries_dir: "{{home_dir}}/libraries"
dirs:
  etc_dir: "{{etc_dir}}"
  front_custom_config: "{{data_dir}}/front_custom_config"
  chwriter_custom_config: "{{data_dir}}/chwriter_custom_config"
  chwriter_custom_migrations: "{{data_dir}}/chwriter_custom_migrations"
  chwriter_emergency: "{{data_dir}}/chwriter_emergency"
  band: "{{images_dir}}/band_base"
  band_set: "{{images_dir}}/band_set"
  rockme_set: "{{images_dir}}/rockme_set"
  director_data: "{{data_dir}}/director"
  environments: "{{data_dir}}/environments"
  user_images: "{{images_dir}}/user"
  user_libraries: "{{libraries_dir}}/user"
  workspace: "{{data_dir}}/workspace"
  notebooks: "{{data_dir}}/notebooks"
  uploads: "{{data_dir}}/uploads"
  grafana_data: "{{home_dir}}/grafana"
  splash: "{{home_dir}}/splash"
  public: "{{data_dir}}/public"
  shared: "{{data_dir}}/shared"
  well_known: "{{home_dir}}/well_known"
  dashboard: "{{home_dir}}/dashboard"
  ovpnkeys: "{{home_dir}}/ovpn_keys"
  acmedns: "{{home_dir}}/acmedns"
  acmesh: "{{home_dir}}/acmesh"
  certs: "{{data_dir}}/certs"
  clickhouse: "/srv/clickhouse"
  clickhouse_config: "{{data_dir}}/clickhouse_config"
  clickhouse_scripts: "{{data_dir}}/clickhouse_scripts"
  clickhouse_tmp: "/srv/clickhouse_tmp"
  clickhouse_log: "/var/log/clickhouse-server"
  redis: "/srv/redis"
create_dirs:
  - ["{{ images_dir }}", "{{ build_dir }}", "{{ data_dir }}", "{{ etc_dir }}", ]
  - ["{{ dirs.well_known }}","{{ dirs.certs }}", "{{ dirs.user_images }}"]
  - ["{{ dirs.workspace }}", "{{ dirs.public }}", "{{ dirs.grafana_data }}"]
  - ["{{ dirs.front_custom_config }}", "{{ dirs.chwriter_custom_config }}"]
  - ["{{ dirs.chwriter_custom_migrations }}", "{{ dirs.environments }}"]
  - ["{{ dirs.user_libraries }}", "{{ dirs.shared }}"]
in_dirs:
  etc: /usr/platform/etc
# ssl files
_ssl_cert_fullchain: fullchain.cer
_ssl_cert: cert.cer
_ssl_cert_key: priv.key
# ########## ports ##########
_ports:
  # services
  director: [10000, 8080]
  front: [10001, 8080]
  front_ws: [10002, 8082]
  heavyload: [10010, 8080]
  httpdebug: [8089,8080]
  # tools
  logspout:
    http: [8085, 8080]
    udp: [5055, 8090]
  grafana: [3000, 3000]
  jupyter: [8888, 8080]
  theia: [8887, 8000]
  theia_dev: [8886, 8080]
  netdata: [19999, 19999]
  fakeshop: [8087, 8080]
  # servers
  http: [80]
  https: [443]
  letsencrypt: [8011, 80]
  openvpn: [8080, 1194]
  redis: [6379, 6379]
  s2svpn: [8079]
  clickhouse_tcp: [9000, 9000]
  clickhouse: [8123, 8123]
  chproxy: [9090, 9090]
  chronograf: [18888]
  influxhttp: [18086]
  influxtsb: [4242]
  statsd: [8125, 8125]
  postgres: [5432, 5432]
  postgrest: [18080, 3000]
ports: "{{_ports|combine(_ports_extra|default({}))}}"
# Mem limits
mem_limit_clickhouse:  "{{ (ansible_memtotal_mb/2)|int }}m"
mem_limit_redis: "{{ (ansible_memtotal_mb/8)|int }}m"
mem_limit_jupyter: "{{ (ansible_memtotal_mb/8)|int }}m"
# ########## Docker ##########
# user defined docker network
docker_net_name: custom
docker_interface: docker1
docker_net_pattern: 172.16.25.* # will be converted to 172.16.25.0/24
docker_users: 
  - '{{support_user}}'
# calculable
docker_net: "{{docker_net_pattern|ip_p2n}}"
docker_host_ip: "{{docker_net|net_gw}}"
docker_netmask: "{{docker_net|ipaddr('netmask')}}"
docker_net_net: "{{docker_net|ipaddr('network')}}"
# default docker network
docker_defnet_pattern: 172.17.*
docker_defnet_net: "{{docker_defnet_pattern|ip_p2n}}"
# other params
docker_band_lbls: { inband: system }
docker_sysctls: { }
docker_log_driver: json-file
docker_log_options: { }
_label_band_managed: { role: managed }
_restart_policy: unless-stopped
# ########## Clients VPN ##########
covpn_keys_dir: '{{home_dir}}/ovpn_keys'
# ########## Server-server VPN ##########
s2s_vpn_connect: false
s2s_vpn_key: 'ovpn_keys/node{{vpn_id}}.ovpn'
s2s_vpn_net_pattern: 192.168.222.*
#                    192.168.222.0/24
s2s_vpn_net: "{{s2s_vpn_net_pattern|ip_p2n}}"
s2s_vpn_host_ip: "{{s2s_vpn_net|net_gw}}"
# ########## Interfaces ##########
if_outer: "{{ansible_default_ipv4.address}}"
if_inner: "{{docker_host_ip}}"
local_nets: [ "127.0.0.0/8", "{{s2s_vpn_net}}", "{{docker_net}}", "{{docker_defnet_net}}" ]
etc_hosts: # also used in docker containers
  host: "{{if_inner}}"
# ########## Firewall ##########
disable_ipv6: false
firewall_rules:
  - { from_ip: '{{docker_net}}'}
  - { to_port: '{{ports.http.0}}'}
  - { to_port: '{{ports.https.0}}'}
  - { to_port: '{{ports.openvpn.0}}'}
# ########## Jupyter/jupyter packages ##########
# install libs to python containers: jupyter and theia
_dev_py_libs: ["msgpack", "ujson", "prodict", "arrow", "simplech", "asimplech"]
dev_py_libs: "{{_dev_env_py_libs|combine(_dev_py_libs_extra|default({})) }}"
# ########## ClickHouse ##########  
_clickhouse_profiles_custom:
  sys_prof: { max_memory_usage: 3000000000, use_uncompressed_cache: 0, load_balancing: random } 
  user_prof: { max_memory_usage: 2000000000, use_uncompressed_cache: 0, load_balancing: random }
_clickhouse_users_custom:
  - { name: "{{rsys_creds.0}}", password: "{{rsys_creds.1}}", networks: "{{ local_nets }}", profile: "sys_prof", quota: "default" }
  - { name: "{{ruser_creds.0}}", password: "{{ruser_creds.1}}", networks: "{{ local_nets }}", profile: "user_prof", quota: "default" }
_clickhouse_logger:
  level: trace
  log: "{{ dirs.clickhouse_log }}/clickhouse-server.log"
  errorlog: "{{ dirs.clickhouse_log }}/clickhouse-server.err.log"
  size: 50M
  count: 7
ch_db: stats
# ########## CH PROXY ##########
_chproxy_defs:
  max_concurrent_queries: 3
  allow_cors: yes
  max_queue_time: 30s
  max_execution_time: 30s
  max_queue_size: 100
  to_cluster: local
_chproxy_allowed_networks_default: "{{local_nets}}"
_chproxy_clusters_default:
  - name: local
    nodes: [ "{{if_inner}}:{{ports.clickhouse.0}}" ]
    users:
      - { name: readonly, password: "" }
      - { name: default, password: "" }
_chproxy_users_default:
  - { to_user: 'readonly', name: 'readonly', password: 'readonly'}
  - { to_user: 'default', name: 'default', password: 'default'}
# ########## CH Common ##########
_chp_dsn: "http://{{main_user}}:{{main_user_password}}@host:{{ports.chproxy.0}}/{{ch_db}}"
_chs_dsn: "http://{{main_user}}@host:{{ports.clickhouse.0}}/{{ch_db}}"
# ########## Services env ##########
_containers_env:
  # https://caddyserver.com/docs/automatic-https#wildcards
  caddy: 
    CADDY_DOCKER_POLLING_INTERVAL: 60s
    # CADDY_DOCKER_LABEL_PREFIX: caddy
    # CADDY_DOCKER_PROXY_SERVICE_TASKS: no
  chwriter:
    CH_DSN: "{{_chs_dsn}}"
  director:
    #ENCODED_ENV will be set in playbook
    PORT: "{{ports.director.1}}"
    IMAGES_PATH: "/images"
    INITIAL_STARTUP: "{{(_initial_startup + _initial_startup_extra|default([]))|to_json}}"
    BIND_HOST_ADDR: "{{ if_inner }}"
    BAND_PY_IMAGE: "{{_images.band}}"
  theia:
    PORT_THEIA: "{{ports.theia.1}}"
    PORT_DEV: "{{ports.theia_dev.1}}"
  heavyload:
    WEBHOOK: "http://front:{{ports.front.1}}/upload/{{ '{{.service}}' }}/{{ '{{.name}}' }}"
# for user overrides
_containers_env_extra: {}
# ########## Common Envs ##########
_common_env:
  JSON_LOGS: "1"
  LOG_LEVEL: "info"
  DOMAIN: "{{_domain}}"
  HOST_ADDR: "{{if_inner}}"
  STATSD_HOST: "{{if_inner}}"
  NETWORK: "{{docker_net_name}}"
  REDIS_DSN: "redis://redis:6379"
  FULLNAME: "{{_fullname}}"
  EMAIL: "{{_email}}"
  UPLOADS_DIR: "{{dirs.uploads}}"
  CH_DSN: "{{_chp_dsn}}"
  CHP_DSN: "{{_chp_dsn}}"
  CHS_DSN: "{{_chs_dsn}}"
  TZ: "{{tz}}"

# for user overrides `_common_env_extra`
common_env: "{{_common_env|combine(_common_env_extra|default({}))}}"
container_env: "{{ {}|combine( common_env, _containers_env[service]|default({}), _containers_env_extra[service]|default({}) ) }}"

# ########## CADDY COMMONS ##########
_caddy_container_lbls:
  "caddy.targetprotocol": "http"
  "caddy.import": "back"
  "caddy.proxy.websocket": "{{'{{nil}}'}}"
  "caddy.proxy.transparent": "{{'{{nil}}'}}"

# ########## NGINX COMMONS ##########
# common blocks
# _nginx_listen: 
#   - "listen 443 ssl http2"
# _nginx_ssl:
#   - ssl_certificate_key     {{dirs.certs}}/{{_domain}}/{{_ssl_cert_key}}
#   - ssl_certificate         {{dirs.certs}}/{{_domain}}/{{_ssl_cert_fullchain}}
#   - ssl_trusted_certificate {{dirs.certs}}/{{_domain}}/{{_ssl_cert}}
# _nginx_nocache:
#   - add_header 'Cache-Control' 'no-store; must-revalidate'
#   - expires off
# _nginx_deny_dots:
#   - location ~ /\. { deny all; return 404; }
# _nginx_auth:
#   - 'auth_basic "Restricted"'
#   - "auth_basic_user_file auth_basic/common"
# _nginx_cors_loc_common: |
#   add_header 'Access-Control-Allow-Origin' '*';
#   add_header 'Access-Control-Allow-Headers' 'Cache-Control';
# _nginx_cors_loc: |
#   if ($request_method = 'OPTIONS') {
#       {{ _nginx_cors_loc_common }}
#       add_header 'Access-Control-Max-Age' 1728000;
#       add_header 'Content-Type' 'text/plain; charset=utf-8';
#       add_header 'Content-Length' 0;
#       return 204;
#   }
#   if ($request_method = 'POST') { {{ _nginx_cors_loc_common }} add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range'; }
#   if ($request_method = 'GET') { {{ _nginx_cors_loc_common }} add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range'; }
# _nginx_base_vh: "{{ _nginx_listen + _nginx_ssl }}"  
# specific configurations
# _nginx_proxy_vh:
#   - server_name {sd}.{{_domain}}
#   - location / { {{_nginx_cors_loc }} proxy_pass http://u{sd}; }
#   - "{{_nginx_base_vh}}"
# _nginx_private_proxy_vh:
#   - "{{_nginx_auth}}"
#   - "{{_nginx_proxy_vh}}"
#   - client_max_body_size 100M
# _nginx_defvh_http:
#   - server_name _http
#   - listen 80 default_server
#   - location /.well-known/ { auth_basic off; proxy_pass http://uletsencrypt; }
#   - location /stub_status { stub_status; allow 127.0.0.1; deny all; access_log off;}
#   - location / { return 301 https://$host$request_uri; }
# _nginx_defvh_https:
#   - "server_name _https"
#   - "{{_nginx_listen.0}} default_server"
#   - "{{_nginx_ssl}}"
#   - "root {{dirs.splash}}"
#   - "location / { try_files $uri /index.html; }"
# _nginx_upload_loc:
#   - location /upload {
#       client_max_body_size 500m;
#       client_body_buffer_size 128K; 
#       limit_except POST { deny all; }
#       proxy_pass http://uheavyload; }
# _nginx_front:
#   - server_name {{_domain}}
#   - "{{_nginx_base_vh}}"
#   - "{{_nginx_deny_dots}}"
#   - "root {{dirs.splash}}"
#   - location / { try_files $uri $uri/index.html @upstream; }
#   - location /public { {{_nginx_cors_loc}} alias {{ dirs.public }}; }
#   - location /wss { proxy_pass http://ufront_ws; }
#   - "{{_nginx_upload_loc}}"
#   - "{{_nginx_front_extra|default([])}}"
#   - location @upstream { proxy_pass http://ufront; }
# _nginx_dashboard:
#   - server_name app.{{_domain}}
#   - "{{_nginx_base_vh}}"
#   - "{{_nginx_auth}}"
#   - "root {{dirs.dashboard}}/dist"
#   - location /api/ { proxy_pass http://udirector/; }
#   - location /ws { proxy_pass http://udirector; }
#   - location / { try_files $uri /index.html; }
# _nginx_grafana:
#   - "{{_nginx_private_proxy_vh}}"
#   - location /public/ { auth_basic off; proxy_pass http://u{sd}; }
#   - proxy_set_header X-WEBAUTH-USER $remote_user
#   - proxy_hide_header Authorization
# _nginx_netdata:
#   - access_log off
#   - "{{_nginx_private_proxy_vh|flatten|map('replace','{sd}','netdata')|list}}"
# _nginx_sites:
#   def_https: "{{_nginx_defvh_https|flatten }}"
#   def_http: "{{_nginx_defvh_http|flatten }}"
#   front: "{{_nginx_front|flatten }}"
#   dashboard: "{{_nginx_dashboard|flatten }}"
#   grafana: "{{_nginx_grafana|flatten|map('replace','{sd}','grafana')|list}}"
#   theia: "{{_nginx_private_proxy_vh|flatten|map('replace','{sd}','theia')|list}}"
#   demo: "{{_nginx_private_proxy_vh|flatten|map('replace','{sd}','demo')|list}}"
#   jupyter: "{{_nginx_private_proxy_vh|flatten|map('replace','{sd}','jupyter')|list}}"
#   netdata: "{{_nginx_netdata|flatten}}"
# _nginx_upstreams:
#   - 'upstream ufront { server {{if_inner}}:{{ports.front.0}}; }'
#   - 'upstream ufront_ws { server {{if_inner}}:{{ports.front_ws.0}};  }'
#   - 'upstream udirector { server {{if_inner}}:{{ports.director.0}};  }'
#   - 'upstream uheavyload { server {{if_inner}}:{{ports.heavyload.0}};  }'
#   - 'upstream ugrafana { server {{if_inner}}:{{ports.grafana.0}}; }'
#   - 'upstream ujupyter { server {{if_inner}}:{{ports.jupyter.0}}; }'
#   - 'upstream unetdata { server {{if_inner}}:{{ports.netdata.0}}; }'
#   - 'upstream utheia { server {{if_inner}}:{{ports.theia.0}}; }'
#   - 'upstream uletsencrypt { server {{if_inner}}:{{ports.letsencrypt.0}}; }'
#   - 'upstream udemo { server {{if_inner}}:{{ports.fakeshop.0}}; }'

# ########## Other things ##########
hostname: "{{inventory_hostname_short|default(inventory_hostname)}}"
# ########## Mailer config ##########
# mailer_subj_key: "Ваши ключи OpenVPN ({{ _domain }}) v{{ playbook_version }}"
# mailer_subj_snip: "Сниппет для сайта ({{ _domain }}) v{{ playbook_version }}"
